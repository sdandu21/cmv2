name: Create Workload Orchestration Config Template
description: Creates an Azure Workload Orchestration Config Template using provided parameters

outputs:
  files_created:
    description: 'Whether config template files were created'
    value: ${{ steps.process-templates.outputs.files_created }}
  templates-skipped:
    description: 'Number of templates that were skipped (already existed)'
    value: ${{ steps.process-templates.outputs.templates_skipped }}
  templates-failed:
    description: 'Number of templates that failed to create'
    value: ${{ steps.process-templates.outputs.templates_failed }}
  skipped-templates-details:
    description: 'JSON array with details of skipped templates'
    value: ${{ steps.process-templates.outputs.skipped_templates_details }}
  failed-templates-details:
    description: 'JSON array with details of failed templates'
    value: ${{ steps.process-templates.outputs.failed_templates_details }}

inputs:
  resource-group:
    description: 'Azure Resource Group name'
    required: true
  location:
    description: 'Azure region location'
    required: true
  # Original inputs (for backward compatibility)
  config-template-name:
    description: 'Name of the config template (if not provided, read from template file)'
    required: false
  version:
    description: 'Version of the config template (if not provided, read from template file)'
    required: false
  config-template-file:
    description: 'Path to the configuration template file (single file mode)'
    required: false
  description:
    description: 'Description of the config template'
    required: false
  # Batch processing inputs
  config-template-files:
    description: 'JSON array of config template file paths for batch processing'
    required: false
    
runs:
  using: composite
  steps:
    - name: Determine Processing Mode
      shell: bash
      run: |
        if [[ -n "${{ inputs.config-template-files }}" ]]; then
          echo "PROCESSING_MODE=batch" >> $GITHUB_ENV
          echo "Using batch processing mode"
        elif [[ -n "${{ inputs.config-template-file }}" ]]; then
          echo "PROCESSING_MODE=single" >> $GITHUB_ENV
          echo "Using single file mode (backward compatibility)"
        else
          echo "Error: Either config-template-files or config-template-file must be provided"
          exit 1
        fi

    - name: Process Config Templates
      id: process-templates
      shell: bash
      run: |
        # Initialize counters and arrays for tracking results
        TEMPLATES_CREATED=0
        TEMPLATES_SKIPPED=0
        TEMPLATES_FAILED=0
        SKIPPED_TEMPLATES_DETAILS="[]"
        FAILED_TEMPLATES_DETAILS="[]"
        FILES_CREATED=false
        TOTAL_PROCESSED=0

        # Read default description
        DEFAULT_DESCRIPTION="Common configuration template for shared settings"
        
        # Determine processing mode and prepare file arrays
        if [[ "$PROCESSING_MODE" == "batch" ]]; then
          echo "üîß Batch mode: Processing multiple config template files"
          TEMPLATE_FILES='${{ inputs.config-template-files }}'
          
          # Get array length
          TEMPLATE_COUNT=$(echo "$TEMPLATE_FILES" | jq 'length')
          
          echo "Processing $TEMPLATE_COUNT template files..."
        else
          echo "üîß Single file mode: Processing ${{ inputs.config-template-file }}"
          TEMPLATE_FILES='["${{ inputs.config-template-file }}"]'
        fi
        
        echo "Template files to process: $TEMPLATE_FILES"
        
        # Process each template file
        template_index=0
        while IFS= read -r template_file; do
          echo ""
          echo "üìÑ Processing template file: $template_file"
          
          # Initialize failure tracking for this file
          FAILURE_REASON=""
          FAILURE_DETAILS=""
          TEMPLATE_NAME="unknown"
          TEMPLATE_VERSION="unknown"
          
          # Validate template file exists and extract version from path
          if [[ ! -f "$template_file" ]]; then
            echo "‚ùå Template file not found: $template_file"
            FAILURE_REASON="Template file not found"
            FAILURE_DETAILS="Template file does not exist at specified path"
            TEMPLATES_FAILED=$((TEMPLATES_FAILED + 1))
            continue
          fi
          
          # Extract version from path
          if [[ "$template_file" =~ /config-templates/([0-9]+\.[0-9]+\.[0-9]+)/ ]]; then
            PATH_VERSION="${BASH_REMATCH[1]}"
          else
            echo "‚ùå Could not extract version from file path: $template_file"
            FAILURE_REASON="Invalid path format"
            FAILURE_DETAILS="Template file must be in a versioned directory (e.g., config-templates/1.0.0/)"
            TEMPLATES_FAILED=$((TEMPLATES_FAILED + 1))
            
            # Add failure details
            ESCAPED_FILE=$(echo "$template_file" | sed 's/"/\\"/g')
            FAILED_ENTRY=$(jq -n \
              --arg file "$ESCAPED_FILE" \
              --arg name "$TEMPLATE_NAME" \
              --arg version "unknown" \
              --arg error "$FAILURE_REASON" \
              --arg details "$FAILURE_DETAILS" \
              '{file: $file, "template-name": $name, version: $version, error: $error, "error-details": $details}')
            
            FAILED_TEMPLATES_DETAILS=$(echo "$FAILED_TEMPLATES_DETAILS" | jq --argjson entry "$FAILED_ENTRY" '. + [$entry]')
            continue
          fi
          
          # Read template metadata
          TEMPLATE_NAME=$(yq eval '.metadata.name' "$template_file" 2>/dev/null || echo "")
          TEMPLATE_VERSION=$(yq eval '.metadata.version' "$template_file" 2>/dev/null || echo "")
          SCHEMA_NAME=$(yq eval '.schema.name' "$template_file" 2>/dev/null || echo "")
          SCHEMA_VERSION=$(yq eval '.schema.version' "$template_file" 2>/dev/null || echo "")
          
          # Override with provided values if given (single file mode only)
          if [[ "$PROCESSING_MODE" == "single" ]]; then
            if [[ -n "${{ inputs.config-template-name }}" ]]; then
              TEMPLATE_NAME="${{ inputs.config-template-name }}"
            fi
            if [[ -n "${{ inputs.version }}" ]]; then
              TEMPLATE_VERSION="${{ inputs.version }}"
            fi
          fi
          
          # Check for version mismatch
          if [[ "$TEMPLATE_VERSION" != "$PATH_VERSION" ]]; then
            echo "‚ùå Version mismatch: File path version ($PATH_VERSION) does not match template version ($TEMPLATE_VERSION)"
            FAILURE_REASON="Version mismatch"
            FAILURE_DETAILS="File path version ($PATH_VERSION) does not match template version ($TEMPLATE_VERSION)"
            TEMPLATES_FAILED=$((TEMPLATES_FAILED + 1))
            
            # Add failure details
            ESCAPED_FILE=$(echo "$template_file" | sed 's/"/\\"/g')
            ESCAPED_TEMPLATE_NAME=$(echo "$TEMPLATE_NAME" | sed 's/"/\\"/g')
            FAILED_ENTRY=$(jq -n \
              --arg file "$ESCAPED_FILE" \
              --arg name "$ESCAPED_TEMPLATE_NAME" \
              --arg version "$TEMPLATE_VERSION" \
              --arg error "$FAILURE_REASON" \
              --arg details "$FAILURE_DETAILS" \
              '{file: $file, "template-name": $name, version: $version, error: $error, "error-details": $details}')
            
            FAILED_TEMPLATES_DETAILS=$(echo "$FAILED_TEMPLATES_DETAILS" | jq --argjson entry "$FAILED_ENTRY" '. + [$entry]')
            continue
          fi
          
          if [[ -z "$TEMPLATE_NAME" || -z "$TEMPLATE_VERSION" || -z "$SCHEMA_NAME" || -z "$SCHEMA_VERSION" ]]; then
            echo "‚ùå Could not read template metadata from $template_file"
            echo "   Template name: '$TEMPLATE_NAME'"
            echo "   Template version: '$TEMPLATE_VERSION'" 
            echo "   Schema name: '$SCHEMA_NAME'"
            echo "   Schema version: '$SCHEMA_VERSION'"
            FAILURE_REASON="Metadata parse error"
            FAILURE_DETAILS="Could not read template name, version, schema name, or schema version from file - check YAML format"
            
            # Add failure details
            ESCAPED_FILE=$(echo "$template_file" | sed 's/"/\\"/g')
            FAILED_ENTRY=$(jq -n \
              --arg file "$ESCAPED_FILE" \
              --arg name "unknown" \
              --arg version "unknown" \
              --arg error "$FAILURE_REASON" \
              --arg details "$FAILURE_DETAILS" \
              '{file: $file, "template-name": $name, version: $version, error: $error, "error-details": $details}')
            
            FAILED_TEMPLATES_DETAILS=$(echo "$FAILED_TEMPLATES_DETAILS" | jq --argjson entry "$FAILED_ENTRY" '. + [$entry]')
            TEMPLATES_FAILED=$((TEMPLATES_FAILED + 1))
          else
            echo "   Template: $TEMPLATE_NAME"
            echo "   Version: $TEMPLATE_VERSION"
            echo "   Schema: $SCHEMA_NAME v$SCHEMA_VERSION"
            
            # Check if required schema version exists
            if ! az workload-orchestration schema version show \
                  -g "${{ inputs.resource-group }}" \
                  --schema-name "$SCHEMA_NAME" \
                  -v "$SCHEMA_VERSION" >/dev/null 2>&1; then
              echo "   ‚ùå Required schema does not exist: $SCHEMA_NAME v$SCHEMA_VERSION"
              FAILURE_REASON="Schema does not exist"
              FAILURE_DETAILS="Schema $SCHEMA_NAME v$SCHEMA_VERSION does not exist. Please ensure the schema and version exist before creating the config template"
              TEMPLATES_FAILED=$((TEMPLATES_FAILED + 1))
              
              # Add failure details
              ESCAPED_FILE=$(echo "$template_file" | sed 's/"/\\"/g')
              ESCAPED_TEMPLATE_NAME=$(echo "$TEMPLATE_NAME" | sed 's/"/\\"/g')
              ESCAPED_TEMPLATE_VERSION=$(echo "$TEMPLATE_VERSION" | sed 's/"/\\"/g')
              FAILED_ENTRY=$(jq -n \
                --arg file "$ESCAPED_FILE" \
                --arg name "$ESCAPED_TEMPLATE_NAME" \
                --arg version "$ESCAPED_TEMPLATE_VERSION" \
                --arg error "$FAILURE_REASON" \
                --arg details "$FAILURE_DETAILS" \
                '{file: $file, "template-name": $name, version: $version, error: $error, "error-details": $details}')
              
              FAILED_TEMPLATES_DETAILS=$(echo "$FAILED_TEMPLATES_DETAILS" | jq --argjson entry "$FAILED_ENTRY" '. + [$entry]')
              continue
            fi
            
            # Check if template version already exists
            if az workload-orchestration config-template version show \
                  -g "${{ inputs.resource-group }}" \
                  --config-template-name "$TEMPLATE_NAME" \
                  -v "$TEMPLATE_VERSION" >/dev/null 2>&1; then
              echo "   ‚è≠Ô∏è  Config template version already exists. Skipping creation."
              TEMPLATES_SKIPPED=$((TEMPLATES_SKIPPED + 1))
              
              # Add to skipped templates details
              ESCAPED_FILE=$(echo "$template_file" | sed 's/"/\\"/g')
              ESCAPED_TEMPLATE_NAME=$(echo "$TEMPLATE_NAME" | sed 's/"/\\"/g')
              ESCAPED_TEMPLATE_VERSION=$(echo "$TEMPLATE_VERSION" | sed 's/"/\\"/g')
              
              SKIPPED_ENTRY=$(jq -n \
                --arg file "$ESCAPED_FILE" \
                --arg name "$ESCAPED_TEMPLATE_NAME" \
                --arg version "$ESCAPED_TEMPLATE_VERSION" \
                --arg reason "Config template version already exists" \
                '{file: $file, "template-name": $name, version: $version, reason: $reason}')
              
              SKIPPED_TEMPLATES_DETAILS=$(echo "$SKIPPED_TEMPLATES_DETAILS" | jq --argjson entry "$SKIPPED_ENTRY" '. + [$entry]')
              continue
            fi
            
            echo "   Status: Creating new config template..."
            
            # Create config template - capture response and errors
            if ! AZ_RESPONSE=$(az workload-orchestration config-template create \
                 -g "${{ inputs.resource-group }}" \
                 -l "${{ inputs.location }}" \
                 --config-template-name "$TEMPLATE_NAME" \
                 --config-template-file "$template_file" \
                 --version "$TEMPLATE_VERSION" \
                 --description "${{ inputs.description || DEFAULT_DESCRIPTION }}" \
                 --output json 2>&1); then
              echo "   ‚ùå Failed to create config template: $TEMPLATE_NAME v$TEMPLATE_VERSION"
              FAILURE_REASON="Azure CLI creation failed"
              FAILURE_DETAILS="$AZ_RESPONSE"
              TEMPLATES_FAILED=$((TEMPLATES_FAILED + 1))
              
              # Add failure details
              ESCAPED_FILE=$(echo "$template_file" | sed 's/"/\\"/g')
              ESCAPED_TEMPLATE_NAME=$(echo "$TEMPLATE_NAME" | sed 's/"/\\"/g')
              ESCAPED_TEMPLATE_VERSION=$(echo "$TEMPLATE_VERSION" | sed 's/"/\\"/g')
              ESCAPED_RESPONSE=$(echo "$AZ_RESPONSE" | sed 's/"/\\"/g' | tr '\n' ' ')
              FAILED_ENTRY=$(jq -n \
                --arg file "$ESCAPED_FILE" \
                --arg name "$ESCAPED_TEMPLATE_NAME" \
                --arg version "$ESCAPED_TEMPLATE_VERSION" \
                --arg error "$FAILURE_REASON" \
                --arg details "$ESCAPED_RESPONSE" \
                '{file: $file, "template-name": $name, version: $version, error: $error, "error-details": $details}')
              
              FAILED_TEMPLATES_DETAILS=$(echo "$FAILED_TEMPLATES_DETAILS" | jq --argjson entry "$FAILED_ENTRY" '. + [$entry]')
              continue
            fi
            
            echo "   ‚úÖ Successfully created config template: $TEMPLATE_NAME v$TEMPLATE_VERSION"
            TEMPLATES_CREATED=$((TEMPLATES_CREATED + 1))
            FILES_CREATED=true
          fi
          
          TOTAL_PROCESSED=$((TOTAL_PROCESSED + 1))
          template_index=$((template_index + 1))
        done < <(echo "$TEMPLATE_FILES" | jq -r '.[]')
        
        # Compact JSON arrays for output
        SKIPPED_TEMPLATES_COMPACT=$(echo "$SKIPPED_TEMPLATES_DETAILS" | jq -c .)
        FAILED_TEMPLATES_COMPACT=$(echo "$FAILED_TEMPLATES_DETAILS" | jq -c .)
        
        # Set all outputs
        echo "files_created=$FILES_CREATED" >> $GITHUB_OUTPUT
        echo "templates_skipped=$TEMPLATES_SKIPPED" >> $GITHUB_OUTPUT
        echo "templates_failed=$TEMPLATES_FAILED" >> $GITHUB_OUTPUT
        echo "skipped_templates_details=$SKIPPED_TEMPLATES_COMPACT" >> $GITHUB_OUTPUT
        echo "failed_templates_details=$FAILED_TEMPLATES_COMPACT" >> $GITHUB_OUTPUT
        
        echo ""
        echo "üìä Config Template Processing Summary:"
        echo "   Total processed: $TOTAL_PROCESSED"
        echo "   Templates created: $TEMPLATES_CREATED"
        echo "   Templates skipped: $TEMPLATES_SKIPPED"
        echo "   Templates failed: $TEMPLATES_FAILED"
        echo "   Files created: $FILES_CREATED"
        
        # Show detailed skipped information if there are skipped templates
        if [[ "$TEMPLATES_SKIPPED" -gt 0 ]]; then
          echo ""
          echo "‚è≠Ô∏è Skipped Templates Details:"
          echo "$SKIPPED_TEMPLATES_DETAILS" | jq -r '.[] | "   - \(.["template-name"]) v\(.version) (\(.file))"'
        fi
        
        # Show detailed failure information if there are failures
        if [[ "$TEMPLATES_FAILED" -gt 0 ]]; then
          echo ""
          echo "‚ùå Failed Templates Details:"
          echo "$FAILED_TEMPLATES_DETAILS" | jq -r '.[] | "   - \(.["template-name"]) v\(.version): \(.error) (\(.file))"'
          
          echo ""
          echo "üîç Detailed Error Information:"
          echo "$FAILED_TEMPLATES_DETAILS" | jq -r '.[] | "   File: \(.file)\n   Template: \(.["template-name"]) v\(.version)\n   Error: \(.error)\n   Details: \(.["error-details"])\n"'
        fi
