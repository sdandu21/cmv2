name: Create WO AKS cluster 
description: Create a workload-orchestration ready AKS cluster
inputs:
  site:
    description: Site name, e.g., austin, boston, etc.
    required: true
  rg:
    description: RG to be used for AKS cluster
    required: true
  akscls:
    description: indicates if AKS cluster already exists
    required: true
  akscon:
    description: indicates if AKS cluster is arc connected
    required: true
  cusloc:
    description: indicate if AKS cluster customLoc exists
    required: true
  woextn:
    description: indicates if connected cluster is has WO extn
    required: true
  aiocrt:
    description: indicates if connected cluster is has aiocert extn
    required: true
outputs:
  custLocId:
    value: ${{ steps.custloc.outputs.custLocId }}
    description: The custom location namespace

runs:
  using: "composite"
  steps:

    - name: source site info
      id: siteinfo
      uses: ./.github/actions/wo-get-site-info
      with:
        site: ${{ inputs.site }}
        rg: ${{ inputs.rg }}

    - name: create cluster identity
      if: ${{ inputs.akscls == 'false' }}
      id: clsid
      shell: bash
      run: |
        echo "CREATE AKS CLUSTER IDENTITY"
        az identity create --resource-group ${{ steps.siteinfo.outputs.rg }} --name ${{ steps.siteinfo.outputs.siteClsId }} 
        echo "clusterIdentity=$(az identity show --resource-group ${{ steps.siteinfo.outputs.rg }} --name ${{ steps.siteinfo.outputs.siteClsId }} --query id --output tsv)" >> $GITHUB_OUTPUT

    - name: Create AKS cluster
      if: ${{ inputs.akscls == 'false' }}
      id: createaks
      shell: bash
      run: |
        echo " "
        echo "CREATE AKS CLUSTER "
        az aks create --resource-group ${{ steps.siteinfo.outputs.rg }} --location ${{ steps.siteinfo.outputs.siteLoc }}  \
                      --name ${{ steps.siteinfo.outputs.siteClsName }} --node-count 2 --node-vm-size Standard_D2s_v5 --assign-identity ${{ steps.clsid.outputs.clusterIdentity }} --generate-ssh-keys

    - name: Get AKS Credentials
      uses: Azure/aks-set-context@v3
      with:
        resource-group: ${{ steps.siteinfo.outputs.rg }}
        cluster-name: ${{ steps.siteinfo.outputs.siteClsName }}

    - name: get cluster context and arc connect cluster
      if: ${{ inputs.akscon == 'false' }}
      id: connectedcluster
      shell: bash
      run: |
        echo " "
        echo "CREATE ARC-CONNECTED AKS CLUSTER "
        kubectl config current-context
        az aks get-credentials --resource-group ${{ steps.siteinfo.outputs.rg }} --name ${{ steps.siteinfo.outputs.siteClsName }} --overwrite-existing
        kubectl config use-context ${{ steps.siteinfo.outputs.siteClsName }}
        az connectedk8s connect --resource-group ${{ steps.siteinfo.outputs.rg }} --location "${{ steps.siteinfo.outputs.siteLoc }}" --name ${{ steps.siteinfo.outputs.siteClsName }}
        az connectedk8s enable-features --resource-group ${{ steps.siteinfo.outputs.rg }} --name ${{ steps.siteinfo.outputs.siteClsName }} --features cluster-connect custom-locations

    - name: install cert manager
      if: ${{ inputs.aiocrt == 'false' }}
      shell: bash
      run: |
        echo " "
        echo "INSTALL aio-certmgr manager extension"
        az k8s-extension create --resource-group ${{ steps.siteinfo.outputs.rg }} --cluster-name ${{ steps.siteinfo.outputs.siteClsName }} --name "aio-certmgr" \
                                --cluster-type connectedClusters --extension-type microsoft.iotoperations.platform --scope cluster --release-namespace cert-manager

    - name: install workloadorchestration extension
      if: ${{ inputs.woextn == 'false' }}
      shell: bash
      run: |
        az cloud update --endpoint-resource-manager "https://eastus2euap.management.azure.com"
        echo " "
        echo "INSTALL workload orchestration extension"
        az k8s-extension create --resource-group ${{ steps.siteinfo.outputs.rg }} --cluster-name ${{ steps.siteinfo.outputs.siteClsName }} \
                                --cluster-type connectedClusters --name "workloadorchestration" --extension-type Microsoft.workloadorchestration --scope cluster \
                                --release-train dev --version ${{ steps.siteinfo.outputs.extnVer }} --auto-upgrade false --config redis.persistentVolume.storageClass="default" \
                                --config redis.persistentVolume.size=20Gi

    - name: get cluster and wo extension details
      id: extension
      shell: bash
      run: |
        echo "clusterId=$(az connectedk8s show --resource-group ${{ steps.siteinfo.outputs.rg }} --name ${{ steps.siteinfo.outputs.siteClsName }} --query id --output tsv)" >> $GITHUB_OUTPUT
        echo "extensionId=$(az k8s-extension show --resource-group ${{ steps.siteinfo.outputs.rg }} --name "workloadorchestration" --cluster-type connectedClusters \
                                                  --cluster-name ${{ steps.siteinfo.outputs.siteClsName }} --query id --output tsv)" >>  $GITHUB_OUTPUT

    - name: get custLoc OID for Service Principals
      # echo "sp-cl-oid=$(az ad sp show --id bc313c14-388c-4e7d-a58e-70017303ee3b --query id -o tsv)" >> $GITHUB_OUTPUT
      # hard coded in MSFT tenant (az ad sp show --id <providerAppId> --query id -o tsv) 
      id: custLocOid
      shell: bash
      run: |
        echo "sp-cl-oid=51dfe1e8-70c6-4de5-a08e-e18aff23d815" >> $GITHUB_OUTPUT

    - name: create and enable customelocation for cluster
      id: custloc
      shell: bash
      run: |
        echo " "
        echo "ENABLE CUSTOMLOCATION on the cluster"
        temp=${{ inputs.cusloc }}

        # extract value from existing custom location and return
        if [[ $temp == "true" ]]; then
          echo 
          echo "customlocation already exists. extract cusLocId  ...."
          echo "custLocId=$(az customlocation show --name ${{ steps.siteinfo.outputs.sitecusLocName }} \
                               --resource-group ${{ steps.siteinfo.outputs.rg }} --query id -o tsv)" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # create customlocation and return custLocId
        echo 
        echo " enable-features ...."
        az connectedk8s enable-features -n ${{ steps.siteinfo.outputs.siteClsName }} -g ${{ steps.siteinfo.outputs.rg }} \
                                        --custom-locations-oid ${{ steps.custLocOid.outputs.sp-cl-oid }} --features cluster-connect custom-locations
        echo 
        echo " customlocation create ...."
        az customlocation create --resource-group ${{ steps.siteinfo.outputs.rg }} --name ${{ steps.siteinfo.outputs.sitecusLocName }} \
                                 --namespace default --host-resource-id ${{ steps.extension.outputs.clusterId }} \
                                 --cluster-extension-ids ${{ steps.extension.outputs.extensionId }} --location  ${{ steps.siteinfo.outputs.siteLoc }} \
                                 --subscription ${{ steps.siteinfo.outputs.subId }}
        
        echo 
        echo " extract customlocation Id ...."
        echo "custLocId=$(az customlocation show --name ${{ steps.siteinfo.outputs.sitecusLocName }} \
                                 --resource-group ${{ steps.siteinfo.outputs.rg }} --query id -o tsv)" >> $GITHUB_OUTPUT

        # az cloud update --endpoint-resource-manager "https://management.azure.com"

    - name: update custlocId
      shell: bash
      run: |
        yq -i ".name = \"${{ steps.custLoc.outputs.custLocId }}\"" .pg/sites/${{ inputs.site }}/custom-location.json
        echo "Updated CL: .pg/sites/${{ inputs.site }}/custom-location.json"

    - name: update custom-location
      # Commit all changed files back to the repository
      uses: stefanzweifel/git-auto-commit-action@v5
